[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const l=r*i;t:for(const u of e.keys())if(u===_){const h=o[l-1];h<=s&&n.set(c,[e.get(u),h])}else{let h=r;for(let f=0;f<u.length;++f,++h){const m=u[f],g=i*h,y=g-i;let d=o[g];const a=Math.max(0,h-s-1),w=Math.min(i-1,h+s);for(let p=a;p<w;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,x=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,x);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,h,i,c+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new z(c,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new S(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)A(n);else if(s.size===1){const[o,r]=s.entries().next().value;R(n,o,r)}}},A=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)A(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&R(e.slice(0,-1),n,o)}},R=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",ht=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},B=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(s-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const h of Object.keys(i)){const f=i[h],m=e._fieldIds[h],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const w=c?c(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!w)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,l),k=n*o*f*w*C,x=u.get(a);if(x){x.score+=k,ht(x.terms,t);const v=G(x.match,s);v?v.push(h):x.match[s]=[h]}else u.set(a,{score:k,terms:[t],match:{[s]:[h]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=n,{fuzzy:u,prefix:h}={...Y.weights,...i},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,l);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(c,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const w=d.length-t.term.length;if(!w)continue;y?.delete(d);const p=h*d.length/(d.length+.3*w);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}if(y)for(const d of y.keys()){const[a,w]=y.get(d);if(!w)continue;const p=u*d.length/(d.length+w);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}return m},X=(e,t,s={})=>{if(t===U)return wt(e,s);if(typeof t!="string"){const h={...s,...t,queries:void 0},f=t.queries.map(m=>X(e,m,h));return Q(f,h.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(h=>l(h)).filter(h=>!!h).map(at(i)).map(h=>xt(e,h,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:l,terms:u,match:h}]of r){const f=u.length||1,m={id:e._documentIds.get(c),score:l*f,terms:Object.keys(h),queryTerms:u,match:h};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(B),i},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),l=n.get(c);l!=null?(l.score+=r,l.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:l}]of n)o.push({suggestion:r,terms:c,score:i/l});return o.sort(B),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=vt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new z,c},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=kt(e,t);i._documentIds=M(n),i._fieldLength=M(o),i._storedFields=M(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of s){const u=new Map;for(const h of Object.keys(l))u.set(parseInt(h,10),M(l[h]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,h=!1)=>{let f;i===0?f=u.length>20?`… ${u.slice(-20)}`:u:h?f=u.length+i>100?`${u.slice(0,100-i)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),i+=f.length,h||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let l=s.indexOf(n,r);if(l===-1)return null;for(;l>=0;){const u=l+n.length;if(c(e.slice(r,l)),r=u,i>100)break;l=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,l=r.includes("@"),u=r.includes("#"),[h,f]=r.split(/[#@]/),m=Number(h),g=i.sort((d,a)=>d.length-a.length).filter((d,a)=>i.slice(a+1).every(w=>!w.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(l)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},c]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},c]),"t"in o&&o.t)for(const a of o.t){const w=g.map(p=>V(a,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:w},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=st($(JSON.parse("{\"/\":{\"documentCount\":9,\"nextId\":9,\"documentIds\":{\"0\":\"0\",\"1\":\"0#构建方法\",\"2\":\"0#功能\",\"3\":\"0#构建方法-可选\",\"4\":\"0#可选-代理库\",\"5\":\"0#可选-项目与文档混合的文档库\",\"6\":\"0#前面两个可选方案的原理\",\"7\":\"0#faq-常见问题\",\"8\":\"1\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[3,11],\"1\":[1,32],\"2\":[1,47],\"3\":[2],\"4\":[2,16],\"5\":[2,12],\"6\":[1,18],\"7\":[3,95],\"8\":[1,3]},\"averageFieldLength\":[1.7777777777777777,29.333333333333332],\"storedFields\":{\"0\":{\"h\":\"生成文档网站 (零配置极简版)\",\"t\":[\"核心: 使用 LincZero.github.io 仓库 (扩展于 VuePress Theme Hope) 的单工具流文件构建系统\"]},\"1\":{\"h\":\"构建方法\",\"t\":[\"两步创建你的在线文档网站！\",\"复制 .github 文件到你的项目根目录上 (主要使用 .github/workflows/static.yml)。此时commit后就会自动构建啦，可能需要稍等一段时间 (在顶部栏中的actions可以看到进度)，等待构建完成后进行下一步。\",\"github的项目页中，以此选择：setting > page > 将 Source 设为 Deploy from a branch，将 Branch 设置为 gh-pages，如下图所示。当启用page后，你就可以通过该图中上面给出的链接来访问你的网站了！\"]},\"2\":{\"h\":\"功能\",\"t\":[\"对比其他文档部署框架有什么优点？为什么选用 LincDocs Workflow？\",\"更适配obsidian: 对部分obsidian特性与插件进行支持。如anyblock、callout语法、wiki双链、关系图谱等\",\"操作简单，无需配置，开箱即用: 两步完成，工作流会自动根据仓库添加需要的配置\",\"零添加，无配置，无污染: 构建库与文档库分离,单工作流文件部署。不需要添加配置文件以及对文档仓库进行污染。\",\"迁移支持优化: 支持从obsidian中迁移、支持识别mdBook的 SUMMARY.md 文件作为目录。只要你拥有一个markdown笔记库，就能轻松构建自己的在线文档!\",\"强大搜索: 像 mdBook 就只能搜索英文\",\"插件丰富: 除前面说到的部分obsidian扩展外，还支持 mermaid、plantuml、markdown-it-container 等\",\"支持扩展、自定义 想要更多的功能，可以创建github，可以fork编译系统并自行修改\"]},\"3\":{\"h\":\"构建方法 - 可选\"},\"4\":{\"h\":\"可选：代理库\",\"t\":[\"可选方案：以上方案实现了构建库与笔记库分离，但依然需要往笔记库添加工作流文件。\",\"如果你无法修改笔记库文件，你可以使用另一个方案：建立一个代理仓库。\",\"该仓库中除了需要添加前面说的工作流文件外，还需要往添加一个 agency 文件，并将其第一行修改成对应笔记库的克隆地址 (格式为 https://... .git)。\",\"这样也可以将目标文档库编译成静态文档网站。\"]},\"5\":{\"h\":\"可选：项目与文档混合的文档库\",\"t\":[\"可选方案：如果你的笔记库不是纯粹的笔记，而是 \\\"项目+文档\\\" 的形式。\",\"也可以，你的文档部分需要在 docs 文件夹里，其他项目部分在不要放这个文件夹里，就可以了。\"]},\"6\":{\"h\":\"前面两个可选方案的原理\",\"t\":[\"如果文档中有 agency 文件：会选择 agency 文件的第一行为仓库地址 (格式为 https://... .git)，否则选择当前仓库为文档库。所以你除了可以在原仓库的基础上新增工作流，也可以创建一个代理仓库用于生成文档而不必修改原仓库。\",\"如果文档中有 docs 文件夹：会选择 docs 文件夹为文档库，否则选择整个仓库内容为文档库。所以你的仓库是纯粹的文档库或是带有文档的项目，都可以用。\"]},\"7\":{\"h\":\"FAQ (常见问题)\",\"t\":[\"如果有问题在这里或在issue中进行搜索，如果无法解决，可以创建一个issue提问\",\"报错：\",\"/usr/bin/git worktree remove github-pages-deploy-action-temp-deployment-folder --force Error: The deploy step encountered an error: The process '/usr/bin/git' failed with exit code 128 ❌ Notice: Deployment failed! ❌\",\"这可能是因为Action没有开启可写权限 (一般不需要，好像个别情况才要)。在 项目仓库页 > 工具栏的设置 > Action > 拉到下面，有一个选项是让你的工作流可写 （如果在Github组织中，需要在组织设置中而非项目仓库页的设置中，进行设置）\",\"为什么我在第二步中没看到 gh-pages 分支？ 需要等待构建完成（在顶部栏中的actions可以看到进度，绿色为构建成功，黄色正在构建，红色为构建失败）\",\"为什么我在setting中没有看到 page 选项？ page选项需要是 yourUserName.github.io 的仓库地址或者 organization 内的项目，才有page选项。如果没有，要么将你的仓库位置修改成这些允许有page的位置，要么使用另一套方案（详情搜issue：分离文档仓库与构建系统仓库）\",\"报错说分支不对/你的主分支不是main？ 修改yml文件，将里面的分支 main 修改为你现在的分支名即可\",\"什么时候会自动更新内容？ 正常commit后，会自动进行文档构建，构建结束后就会自动更新网站内容\",\"如何使用非github.io部署？ 略，提issue，有人问我再回\",\"我没有在这里找到我的问题？ 在issue中搜索看是否有人问过相同的问题，看是否能解决。若没有，则提issue\",\"还有其他好用的单工作流部署系统吗？ github默认的jekyll、python的mkdocs-material、mdBook、cookbook 等\"]},\"8\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"not\",{\"1\":{\"8\":1}}],[\"notice\",{\"1\":{\"7\":1}}],[\"404\",{\"1\":{\"8\":1}}],[\"则提issue\",{\"1\":{\"7\":1}}],[\"若没有\",{\"1\":{\"7\":1}}],[\"看是否能解决\",{\"1\":{\"7\":1}}],[\"我没有在这里找到我的问题\",{\"1\":{\"7\":1}}],[\"有人问我再回\",{\"1\":{\"7\":1}}],[\"有一个选项是让你的工作流可写\",{\"1\":{\"7\":1}}],[\"提issue\",{\"1\":{\"7\":1}}],[\"略\",{\"1\":{\"7\":1}}],[\"会自动进行文档构建\",{\"1\":{\"7\":1}}],[\"会选择\",{\"1\":{\"6\":2}}],[\"正常commit后\",{\"1\":{\"7\":1}}],[\"什么时候会自动更新内容\",{\"1\":{\"7\":1}}],[\"修改为你现在的分支名即可\",{\"1\":{\"7\":1}}],[\"修改yml文件\",{\"1\":{\"7\":1}}],[\"分离文档仓库与构建系统仓库\",{\"1\":{\"7\":1}}],[\"分支\",{\"1\":{\"7\":1}}],[\"详情搜issue\",{\"1\":{\"7\":1}}],[\"要么使用另一套方案\",{\"1\":{\"7\":1}}],[\"要么将你的仓库位置修改成这些允许有page的位置\",{\"1\":{\"7\":1}}],[\"才有page选项\",{\"1\":{\"7\":1}}],[\"内的项目\",{\"1\":{\"7\":1}}],[\"organization\",{\"1\":{\"7\":1}}],[\"yourusername\",{\"1\":{\"7\":1}}],[\"yml\",{\"1\":{\"1\":1}}],[\"选项\",{\"1\":{\"7\":1}}],[\"红色为构建失败\",{\"1\":{\"7\":1}}],[\"黄色正在构建\",{\"1\":{\"7\":1}}],[\"绿色为构建成功\",{\"1\":{\"7\":1}}],[\"需要等待构建完成\",{\"1\":{\"7\":1}}],[\"需要在组织设置中而非项目仓库页的设置中\",{\"1\":{\"7\":1}}],[\"为什么我在setting中没有看到\",{\"1\":{\"7\":1}}],[\"为什么我在第二步中没看到\",{\"1\":{\"7\":1}}],[\"为什么选用\",{\"1\":{\"2\":1}}],[\"进行设置\",{\"1\":{\"7\":1}}],[\"拉到下面\",{\"1\":{\"7\":1}}],[\"工具栏的设置\",{\"1\":{\"7\":1}}],[\"工作流会自动根据仓库添加需要的配置\",{\"1\":{\"2\":1}}],[\"在issue中搜索看是否有人问过相同的问题\",{\"1\":{\"7\":1}}],[\"在\",{\"1\":{\"7\":1}}],[\"在顶部栏中的actions可以看到进度\",{\"1\":{\"1\":1,\"7\":1}}],[\"好像个别情况才要\",{\"1\":{\"7\":1}}],[\"一般不需要\",{\"1\":{\"7\":1}}],[\"这可能是因为action没有开启可写权限\",{\"1\":{\"7\":1}}],[\"这样也可以将目标文档库编译成静态文档网站\",{\"1\":{\"4\":1}}],[\"❌\",{\"1\":{\"7\":2}}],[\"128\",{\"1\":{\"7\":1}}],[\"exit\",{\"1\":{\"7\":1}}],[\"encountered\",{\"1\":{\"7\":1}}],[\"error\",{\"1\":{\"7\":2}}],[\"the\",{\"1\":{\"7\":2}}],[\"theme\",{\"1\":{\"0\":1}}],[\"temp\",{\"1\":{\"7\":1}}],[\"remove\",{\"1\":{\"7\":1}}],[\"bin\",{\"1\":{\"7\":2}}],[\"branch\",{\"1\":{\"1\":2}}],[\"usr\",{\"1\":{\"7\":2}}],[\"报错说分支不对\",{\"1\":{\"7\":1}}],[\"报错\",{\"1\":{\"7\":1}}],[\"常见问题\",{\"0\":{\"7\":1}}],[\"failed\",{\"1\":{\"7\":2}}],[\"faq\",{\"0\":{\"7\":1}}],[\"found\",{\"1\":{\"8\":1}}],[\"force\",{\"1\":{\"7\":1}}],[\"folder\",{\"1\":{\"7\":1}}],[\"from\",{\"1\":{\"1\":1}}],[\"都可以用\",{\"1\":{\"6\":1}}],[\"所以你的仓库是纯粹的文档库或是带有文档的项目\",{\"1\":{\"6\":1}}],[\"所以你除了可以在原仓库的基础上新增工作流\",{\"1\":{\"6\":1}}],[\"否则选择整个仓库内容为文档库\",{\"1\":{\"6\":1}}],[\"否则选择当前仓库为文档库\",{\"1\":{\"6\":1}}],[\"前面两个可选方案的原理\",{\"0\":{\"6\":1}}],[\"其他项目部分在不要放这个文件夹里\",{\"1\":{\"5\":1}}],[\"docs\",{\"1\":{\"5\":1,\"6\":2}}],[\"deployment\",{\"1\":{\"7\":2}}],[\"deploy\",{\"1\":{\"1\":1,\"7\":2}}],[\"也可以创建一个代理仓库用于生成文档而不必修改原仓库\",{\"1\":{\"6\":1}}],[\"也可以\",{\"1\":{\"5\":1}}],[\"的仓库地址或者\",{\"1\":{\"7\":1}}],[\"的形式\",{\"1\":{\"5\":1}}],[\"的单工具流文件构建系统\",{\"1\":{\"0\":1}}],[\"项目仓库页\",{\"1\":{\"7\":1}}],[\"项目+文档\",{\"1\":{\"5\":1}}],[\"项目与文档混合的文档库\",{\"0\":{\"5\":1}}],[\"而是\",{\"1\":{\"5\":1}}],[\"https\",{\"1\":{\"4\":1,\"6\":1}}],[\"hope\",{\"1\":{\"0\":1}}],[\"格式为\",{\"1\":{\"4\":1,\"6\":1}}],[\"并将其第一行修改成对应笔记库的克隆地址\",{\"1\":{\"4\":1}}],[\"还有其他好用的单工作流部署系统吗\",{\"1\":{\"7\":1}}],[\"还需要往添加一个\",{\"1\":{\"4\":1}}],[\"还支持\",{\"1\":{\"2\":1}}],[\"该仓库中除了需要添加前面说的工作流文件外\",{\"1\":{\"4\":1}}],[\"建立一个代理仓库\",{\"1\":{\"4\":1}}],[\"你的主分支不是main\",{\"1\":{\"7\":1}}],[\"你的文档部分需要在\",{\"1\":{\"5\":1}}],[\"你可以使用另一个方案\",{\"1\":{\"4\":1}}],[\"你就可以通过该图中上面给出的链接来访问你的网站了\",{\"1\":{\"1\":1}}],[\"但依然需要往笔记库添加工作流文件\",{\"1\":{\"4\":1}}],[\"以上方案实现了构建库与笔记库分离\",{\"1\":{\"4\":1}}],[\"以此选择\",{\"1\":{\"1\":1}}],[\"代理库\",{\"0\":{\"4\":1}}],[\"可选方案\",{\"1\":{\"4\":1,\"5\":1}}],[\"可选\",{\"0\":{\"3\":1,\"4\":1,\"5\":1}}],[\"可以创建一个issue提问\",{\"1\":{\"7\":1}}],[\"可以创建github\",{\"1\":{\"2\":1}}],[\"可以fork编译系统并自行修改\",{\"1\":{\"2\":1}}],[\"可能需要稍等一段时间\",{\"1\":{\"1\":1}}],[\"想要更多的功能\",{\"1\":{\"2\":1}}],[\"自定义\",{\"1\":{\"2\":1}}],[\"等\",{\"1\":{\"2\":1,\"7\":1}}],[\"等待构建完成后进行下一步\",{\"1\":{\"1\":1}}],[\"cookbook\",{\"1\":{\"7\":1}}],[\"code\",{\"1\":{\"7\":1}}],[\"container\",{\"1\":{\"2\":1}}],[\"callout语法\",{\"1\":{\"2\":1}}],[\"it\",{\"1\":{\"2\":1}}],[\"io部署\",{\"1\":{\"7\":1}}],[\"io\",{\"1\":{\"0\":1,\"7\":1}}],[\"python的mkdocs\",{\"1\":{\"7\":1}}],[\"process\",{\"1\":{\"7\":1}}],[\"plantuml\",{\"1\":{\"2\":1}}],[\"page选项需要是\",{\"1\":{\"7\":1}}],[\"pages\",{\"1\":{\"1\":1,\"7\":2}}],[\"page\",{\"1\":{\"1\":1,\"7\":1}}],[\"material\",{\"1\":{\"7\":1}}],[\"main\",{\"1\":{\"7\":1}}],[\"markdown\",{\"1\":{\"2\":1}}],[\"mermaid\",{\"1\":{\"2\":1}}],[\"mdbook\",{\"1\":{\"2\":1,\"7\":1}}],[\"md\",{\"1\":{\"2\":1}}],[\"除前面说到的部分obsidian扩展外\",{\"1\":{\"2\":1}}],[\"插件丰富\",{\"1\":{\"2\":1}}],[\"就可以了\",{\"1\":{\"5\":1}}],[\"就只能搜索英文\",{\"1\":{\"2\":1}}],[\"就能轻松构建自己的在线文档\",{\"1\":{\"2\":1}}],[\"像\",{\"1\":{\"2\":1}}],[\"强大搜索\",{\"1\":{\"2\":1}}],[\"只要你拥有一个markdown笔记库\",{\"1\":{\"2\":1}}],[\"文件夹为文档库\",{\"1\":{\"6\":1}}],[\"文件夹\",{\"1\":{\"6\":1}}],[\"文件夹里\",{\"1\":{\"5\":1}}],[\"文件的第一行为仓库地址\",{\"1\":{\"6\":1}}],[\"文件\",{\"1\":{\"4\":1,\"6\":1}}],[\"文件作为目录\",{\"1\":{\"2\":1}}],[\"文件到你的项目根目录上\",{\"1\":{\"1\":1}}],[\"支持扩展\",{\"1\":{\"2\":1}}],[\"支持识别mdbook的\",{\"1\":{\"2\":1}}],[\"支持从obsidian中迁移\",{\"1\":{\"2\":1}}],[\"迁移支持优化\",{\"1\":{\"2\":1}}],[\"不需要添加配置文件以及对文档仓库进行污染\",{\"1\":{\"2\":1}}],[\"单工作流文件部署\",{\"1\":{\"2\":1}}],[\"构建结束后就会自动更新网站内容\",{\"1\":{\"7\":1}}],[\"构建库与文档库分离\",{\"1\":{\"2\":1}}],[\"构建方法\",{\"0\":{\"1\":1,\"3\":1}}],[\"无污染\",{\"1\":{\"2\":1}}],[\"无配置\",{\"1\":{\"2\":1}}],[\"无需配置\",{\"1\":{\"2\":1}}],[\"零添加\",{\"1\":{\"2\":1}}],[\"零配置极简版\",{\"0\":{\"0\":1}}],[\"两步完成\",{\"1\":{\"2\":1}}],[\"两步创建你的在线文档网站\",{\"1\":{\"1\":1}}],[\"开箱即用\",{\"1\":{\"2\":1}}],[\"操作简单\",{\"1\":{\"2\":1}}],[\"关系图谱等\",{\"1\":{\"2\":1}}],[\"with\",{\"1\":{\"7\":1}}],[\"wiki双链\",{\"1\":{\"2\":1}}],[\"worktree\",{\"1\":{\"7\":1}}],[\"workflow\",{\"1\":{\"2\":1}}],[\"workflows\",{\"1\":{\"1\":1}}],[\"如何使用非github\",{\"1\":{\"7\":1}}],[\"如果没有\",{\"1\":{\"7\":1}}],[\"如果在github组织中\",{\"1\":{\"7\":1}}],[\"如果无法解决\",{\"1\":{\"7\":1}}],[\"如果有问题在这里或在issue中进行搜索\",{\"1\":{\"7\":1}}],[\"如果文档中有\",{\"1\":{\"6\":2}}],[\"如果你的笔记库不是纯粹的笔记\",{\"1\":{\"5\":1}}],[\"如果你无法修改笔记库文件\",{\"1\":{\"4\":1}}],[\"如anyblock\",{\"1\":{\"2\":1}}],[\"如下图所示\",{\"1\":{\"1\":1}}],[\"对部分obsidian特性与插件进行支持\",{\"1\":{\"2\":1}}],[\"对比其他文档部署框架有什么优点\",{\"1\":{\"2\":1}}],[\"更适配obsidian\",{\"1\":{\"2\":1}}],[\"lincdocs\",{\"1\":{\"2\":1}}],[\"linczero\",{\"1\":{\"0\":1}}],[\"功能\",{\"0\":{\"2\":1}}],[\"当启用page后\",{\"1\":{\"1\":1}}],[\"git\",{\"1\":{\"4\":1,\"6\":1,\"7\":2}}],[\"github默认的jekyll\",{\"1\":{\"7\":1}}],[\"github的项目页中\",{\"1\":{\"1\":1}}],[\"github\",{\"1\":{\"0\":1,\"1\":2,\"7\":2}}],[\"gh\",{\"1\":{\"1\":1,\"7\":1}}],[\"设置为\",{\"1\":{\"1\":1}}],[\"设为\",{\"1\":{\"1\":1}}],[\"an\",{\"1\":{\"7\":1}}],[\"action\",{\"1\":{\"7\":2}}],[\"agency\",{\"1\":{\"4\":1,\"6\":2}}],[\"a\",{\"1\":{\"1\":1}}],[\"将里面的分支\",{\"1\":{\"7\":1}}],[\"将\",{\"1\":{\"1\":2}}],[\">\",{\"1\":{\"1\":2,\"7\":3}}],[\"step\",{\"1\":{\"7\":1}}],[\"static\",{\"1\":{\"1\":1}}],[\"summary\",{\"1\":{\"2\":1}}],[\"source\",{\"1\":{\"1\":1}}],[\"setting\",{\"1\":{\"1\":1}}],[\"此时commit后就会自动构建啦\",{\"1\":{\"1\":1}}],[\"主要使用\",{\"1\":{\"1\":1}}],[\"复制\",{\"1\":{\"1\":1}}],[\"vuepress\",{\"1\":{\"0\":1}}],[\"扩展于\",{\"1\":{\"0\":1}}],[\"仓库\",{\"1\":{\"0\":1}}],[\"使用\",{\"1\":{\"0\":1}}],[\"核心\",{\"1\":{\"0\":1}}],[\"生成文档网站\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
